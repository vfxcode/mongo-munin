#!/usr/bin/env python

## GENERATED FILE - DO NOT EDIT

import urllib2
import sys
import os
from bson import json_util

def extractHostPort():
    basename = os.path.basename(__file__).rsplit('_')[-1]
    host, port = basename.split(':')
    return (host, port)

def getServerRequest(action):
    host, port = extractHostPort()
    url = "http://%s:%s/%s" % (host, port, action)
    req = urllib2.Request(url)
    raw = urllib2.urlopen(req).read()
    return json_util.loads( raw )

def getServerStatus():
    return getServerRequest('_status')['serverStatus']

def doData():
    ss = getServerRequest('replSetGetStatus')

    # On non-replication servers we get an errmsg
    if ss.get('errmsg', False):
        exit(1)

    members = ss["members"]
    for _, member in enumerate(members):
        if member.get('self', False):
            me = member
        if member['stateStr'] == 'PRIMARY':
            primary = member

    secs_behind = (primary['optimeDate'] - me['optimeDate']).total_seconds()
    print('secs_behind.value %i' % secs_behind)

def doConfig():
    host, port = extractHostPort()
    ss = getServerRequest('replSetGetStatus')

    # On non-replication servers we get an errmsg
    if ss.get('errmsg', False):
        exit(1)

    set = ss['set']

    print "graph_title MongoDB rs:%s (%s:%s)" % (set, host, port)
    print "graph_category MongoDB"
    print "graph_vlabel seconds"
    print "graph_args -l 0"
    print "secs_behind.label Seconds Behind"

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "config":
        doConfig()
    else:
        doData()

